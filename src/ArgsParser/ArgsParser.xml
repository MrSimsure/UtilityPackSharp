<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArgsParser</name>
    </assembly>
    <members>
        <member name="T:UtilityPack.ArgsParser.ArgsCommand">
            <summary> Argument Command definition </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsCommand.Name">
            <summary> Command Name </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsCommand.Description">
            <summary> Command description, shown when the -help option is used </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsCommand.ValidOptions">
            <summary> List of valid options for this command </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsCommand.ValidParameters">
            <summary> List of valid parameters group for this command </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsCommand.#ctor(System.String)">
            <summary> Argument Command definition </summary>
        </member>
        <member name="T:UtilityPack.ArgsParser.ArgsOption">
            <summary> Argument Option definition </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsOption.Name">
            <summary> Option Name </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsOption.Description">
            <summary> Option description, shown when the -help option is used </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsOption.IsFlag">
            <summary> If true no additional data after the option is required </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsOption.Alias">
            <summary> Another name to use instead of <see cref="F:UtilityPack.ArgsParser.ArgsOption.Name"/> </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsOption.type">
            <summary> Type of this option, if blank and <see cref="F:UtilityPack.ArgsParser.ArgsOption.IsFlag"/> is true, it will be of type 'flag' </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsOption.DefaultValue">
            <summary> If no value is passed this value is used instead </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsOption.#ctor(System.String)">
            <summary> Argument Option definition </summary>
        </member>
        <member name="T:UtilityPack.ArgsParser.ArgsParameter">
            <summary> Argument Parameter definition </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsParameter.Name">
            <summary> Name of the parameter, to retrive it after command parsing </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsParameter.Description">
            <summary> Parameter description, shown when the -help option is used </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsParameter.type">
            <summary> Type of this argument </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParameter.#ctor(System.String)">
            <summary> Argument Parameter definition </summary>
        </member>
        <member name="T:UtilityPack.ArgsParser.ArgsParser">
            <summary> Class to parse arguments from the terminal and consult them during execution </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsParser.allowNoCommand">
            <summary> If set to true will not print an error if no command is used </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsParser.allowNoParameter">
            <summary> If set to true will not print an error if no pareter is passed </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsParser.optionPrefixs">
            <summary> List of strings that recognizes the start of an option declaration. (Default {"-", "--"} ) </summary>
        </member>
        <member name="F:UtilityPack.ArgsParser.ArgsParser.helpFlags">
            <summary> List of strings indicating the presence of the "help" option to write the help message. (Default {"-help", "--help", "-h"}) </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.AddCommand(UtilityPack.ArgsParser.ArgsCommand)">
            <summary> Add a new command definition </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.AddOption(UtilityPack.ArgsParser.ArgsOption)">
            <summary> Add a new option definition </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.AddOption(UtilityPack.ArgsParser.ArgsOption[])">
            <summary> Add a new array of options definition </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.AddParameterGroup(System.String,UtilityPack.ArgsParser.ArgsParameter[])">
            <summary> Add a new array of commands definition </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.CommandCount">
            <summary> Retrun number of commands used </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.OptionCount">
            <summary> Retrun number of options used </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.ParameterCount">
            <summary> Retrun number of parameters used </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.GetCommand(System.Int32)">
            <summary> Get a command name based on the position </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.OptionExist(System.String)">
            <summary> Get if an option has been used based on his name</summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.GetOption(System.String)">
            <summary> Get an option value based on his name </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.GetOption``1(System.String)">
            <summary> Get an option value of a specific type based on his name </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.LoadOption``1(System.String,``0)">
            <summary> Get an option value based on his name, but check if it exist otherwise return a default value </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.ParameterExist(System.String)">
            <summary> Get an option value based on his name </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.GetParameter(System.String)">
            <summary> Get an option value based on his name </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.GetParameter``1(System.String)">
            <summary> Get an option value based on his name </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.GetTextParameter(System.String[])">
            <summary> Get a string of all valid parameters from a group </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.Parse(System.String[])">
            <summary> Execute the parsing of the arguments </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.PrintCommands">
            <summary> Print all the commands parsed and their values </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.PrintOptions">
            <summary> Print all the options parsed and their values </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.PrintParameters">
            <summary> Print all the parameters parsed and their values </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.PrintError(System.String,System.String)">
            <summary> Function of parsing error printing </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.PrintWarning(System.String,System.String)">
            <summary> Function of parsing error printing </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParser.PrintHelp(UtilityPack.ArgsParser.ArgsCommand)">
            <summary>
            Write the help message of the last command inserted, if no command is found, print the command list
            </summary>
        </member>
        <member name="T:UtilityPack.ArgsParser.ArgsParseErrorException">
            <summary> Eccezzione lanciata quando avviene un errore nel parsing degli argomenti </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParseErrorException.#ctor">
            <summary> Eccezzione lanciata quando avviene un errore nel parsing degli argomenti </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParseErrorException.#ctor(System.String)">
            <summary> Eccezzione lanciata quando avviene un errore nel parsing degli argomenti </summary>
        </member>
        <member name="M:UtilityPack.ArgsParser.ArgsParseErrorException.#ctor(System.String,System.Exception)">
            <summary> Eccezzione lanciata quando avviene un errore nel parsing degli argomenti </summary>
        </member>
    </members>
</doc>
